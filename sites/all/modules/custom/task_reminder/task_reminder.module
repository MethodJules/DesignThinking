<?php
/**
 * Created by PhpStorm.
 * User: jonaskortum
 * Date: 02.11.16
 * Time: 12:15
 */


function task_reminder_menu()
{
    $items['gruppenaufgaben'] = array(
        'title' => 'Anzeige aller Gruppenaufgaben',
        'page callback' => 'task_reminder_get_content',
        'access callback' => 'user_is_logged_in',
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );

    $items['gruppentermine'] = array(
        'title' => 'Anzeige aller Gruppentermine',
        'page callback' => 'task_reminder_get_appointment_content',
        'access callback' => 'user_is_logged_in',
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );

    $items['delete_appointment/%'] = array(
        'title' => 'Publications',
        'access callback' => true,
        'access callback' => 'user_is_logged_in',
        'page callback' => 'task_reminder_delete_appointment',
    );

    return $items;
}

function task_reminder_get_content()
{
    $tempString = "<h2>offene Aufgaben der Gruppe</h2>";
    $tempString .= "<table><th>Kurzbezeichnung</th><th>zugehöriger Benutzer (Wer?)</th> <th> Aufgabe (Was?)</th> <th>Deadline (Wann?)</th><th>Priorität</th><th>Aktionen</th>";
    $tasks = getParticipants();

    global $base_url;

    $sql = "SELECT * FROM {task} WHERE done = 0 AND uid IN (" . $tasks . ") ORDER BY deadline";
    $result = db_query($sql);
    foreach ($result as $pro) {
        $user = user_load($pro->uid);
        $username = $user->field_first_name['und'][0]['value'] . " " . $user->field_last_name['und'][0]['value'];;
        $date = new DateTime($pro->deadline);
        $deadline2 = $date->format('d.m.Y');
        $deadline3 = $date->format('d.m.Y H:i:s') . " Uhr";
        $tempString = $tempString . "<tr><td>$pro->short_description</td><td>$username</td><td>$pro->task</td><td>$deadline3</td><td>$pro->priority</td><td><a href='".$base_url."/delete_task/$pro->task_id/zqjvEz44Qx'>erledigt</a></td></tr></tr>";
    }

    $tempString .= "</table>";
    $tempString .= "<br>";
    $tempString .= "<h2>erledigte Aufgaben der Gruppe</h2>";
    $tempString .= "<table><th>Kurzbezeichnung</th><th>zugehöriger Benutzer (Wer?)</th> <th> Aufgabe (Was?)</th> <th>Deadline (Wann?)</th><th>Priorität</th>";
    $sql = "SELECT * FROM {task} WHERE done = 1 AND uid IN (" . $tasks . ") ORDER BY deadline";
    $result2 = db_query($sql);

    foreach ($result2 as $res) {
        $user = user_load($res->uid);
        $username = $user->field_first_name['und'][0]['value'] . " " . $user->field_last_name['und'][0]['value'];
        $date = new DateTime($res->deadline);
        $deadline3 = $date->format('d.m.Y H:i:s') . " Uhr";
        $tempString = $tempString . "<tr><td>$res->short_description</td><td>$username</td><td>$res->task</td><td>$deadline3</td><td>$res->priority</td></tr></tr>";
    }

    $tempString .= "</table>";
    $tempString .= task_reminder_create_pie_chart("Aufgabenübersicht der Gruppe", get_task_overview());
    $tasks = explode(",", $tasks);

    foreach ($tasks as $item) {
        $user = user_load($item);
        $title = "Aufgabenübersicht von " . $user->name;
        $tempString .= task_reminder_create_pie_chart($title, get_task_overview_per_user($item));
    }

    return $tempString;
}

function get_task_overview()
{

    $tasks = getParticipants();
    $sql = "SELECT * FROM {task} WHERE uid IN (" . $tasks . ") ORDER BY deadline";
    $result2 = db_query($sql);

    $done = 0;
    $open = 0;
    foreach ($result2 as $res) {
        if ($res->done == 1) {
            $done++;
        } else {
            $open++;
        }
    }
    $array = array("offen" => $open, "erledigt" => $done);

    return $array;
}

function get_task_overview_per_user($uid)
{
    $sql = "SELECT * FROM {task} WHERE uid =  " . $uid . " ORDER BY deadline";
    $result2 = db_query($sql);

    $done = 0;
    $open = 0;
    foreach ($result2 as $res) {
        if ($res->done == 1) {
            $done++;
        } else {
            $open++;
        }
    }
    $array = array("offen" => $open, "erledigt" => $done);

    return $array;

}


function getParticipants()
{
    $users = array();
    global $user;
    $user_id = $user->uid;

    $sql = "SELECT ur.rid, r.name, ur.uid FROM {role} AS r INNER JOIN {users_roles} AS ur ON r.rid = ur.rid WHERE ur.rid = (SELECT usro.rid FROM {users_roles} as usro WHERE usro.uid = $user_id)";

    $proresult = db_query($sql);

    foreach ($proresult as $pro) {
        array_push($users, $pro->uid);
    }

    $list = implode(',', $users);

    return $list;
}


function task_reminder_block_info()
{
    $blocks['task_reminder'] = array(
        'info' => t('Anstehende Aufgaben'),
    );
    return $blocks;
}

function task_reminder_block_view($delta)
{

    global $base_url;
    $block = array();

    switch ($delta) {
        case 0:
            $block['subject'] = t('Anstehende Aufgaben');
            $block['content'] = "";
            $tasks = get_user_tasks();
            foreach ($tasks as $t) {

                $date = new DateTime($t->deadline);
                $deadline2 = $date->format('d.m.Y H:i');
                $block['content'] .= "<ul><li><a href='".$base_url."/gruppenaufgaben'>$t->short_description</a></li>$deadline2</ul>";
            }
            break;
    }
    return $block;
}

function get_user_tasks()
{
    global $user;
    $user_id = $user->uid;

    $sql = "SELECT * FROM {task} WHERE uid = $user_id AND done = 0 ORDER BY deadline";
    $result = db_query($sql);

    return $result;
}

function task_reminder_get_appointment_content()
{
    $tasks = getParticipants();
    $sql = "SELECT * FROM {appointment} WHERE uid IN (" . $tasks . ") ORDER BY date";
    $result = db_query($sql);
    $tempString = "<h2>alle Termine der Gruppe</h2>";
    $tempString .= "<table><th>Kurzbezeichnung</th><th>Terminbeschreibung</th> <th>Datum</th><th>Aktion</th>";

    global $base_url;

    foreach ($result as $item) {
        $tempString = $tempString . "<tr><td>$item->short_description</td><td>$item->appointment</td><td>$item->date</td><td><a href='".$base_url."/delete_appointment/" . $item->appointment_id . "'>löschen</a></td></tr></tr>";

    }

    $tempString .= "</table>";
    return $tempString;
}

function task_reminder_delete_appointment()
{


    $appointment_id = arg(1);

    $sql = "SELECT * FROM {appointment} WHERE appointment_id = " . $appointment_id;
    $result = db_query($sql);
    foreach ($result as $item) {
        $sql = "SELECT * FROM {node} WHERE type = 'event' AND title = '" . $item->short_description . "'";
        $result = db_query($sql);
        foreach ($result as $item2) {
            node_delete($item2->nid);
        }
    }

    $sql = "DELETE FROM {appointment} WHERE appointment_id = " . $appointment_id;
    db_query($sql);

    drupal_set_message("Termin wurde gelöscht");
    drupal_goto("gruppentermine");
}

function task_reminder_create_pie_chart($title, $value)
{

    $testarray = array_keys($value);

    $testString = "[";

    $id = 0;
    foreach ($value as $item) {
        $color = "black";
        if($item == 0) {
            $color = "white";
        }


        $testString .= '{"label":"' . $testarray[$id] . '", "value":' . $item . ', "color":"'.$color.'"},';
        $id++;
    }

    $testString = substr($testString, 0, -1);
    $testString .= "];";


    $html = '<script src="http://d3js.org/d3.v3.min.js"></script>';
    $html .= '<style>


svg {
	width: 960px;
  height: 500px;
  display: block;
  margin: 0 auto;
}

.svg text {
	fill: black;
	font: 10px sans-serif;
	font-weight: bold;
	text-anchor: start;
}

path.slice{
	stroke-width:2px;
}

polyline{
	opacity: .3;
	stroke: black;
	stroke-width: 2px;
	fill: none;
}

.labelValue
{
	font-size: 60%;
	opacity: .5;

}

.toolTip {
    font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
    position: absolute;
    display: none;
    width: auto;
    height: auto;
    background: none repeat scroll 0 0 white;
    border: 0 none;
    border-radius: 8px 8px 8px 8px;
    box-shadow: -3px 3px 15px #888888;
    color: black;
    font: 12px sans-serif;
    padding: 5px;
    text-align: center;
}
text {
  font: 12px sans-serif;
}
</style>';

    $html .= '<script>


d3.select("input[value=\"total\"]").property("checked", true);

var svg = d3.select("body")
	.append("svg")
	.append("g")

svg.append("g")
	.attr("class", "slices");
svg.append("g")
	.attr("class", "labelName");
svg.append("g")
	.attr("class", "labelValue");
svg.append("g")
	.attr("class", "lines");

var width = 960,
    height = 450,
	radius = Math.min(width, height) / 2;

var pie = d3.layout.pie()
	.sort(null)
	.value(function(d) {
		return d.value;
	});

var arc = d3.svg.arc()
	.outerRadius(radius * 0.8)
	.innerRadius(radius * 0.4);

var outerArc = d3.svg.arc()
	.innerRadius(radius * 0.9)
	.outerRadius(radius * 0.9);

var legendRectSize = (radius * 0.05);
var legendSpacing = radius * 0.02;


var div = d3.select("body").append("div").attr("class", "toolTip");

svg.attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

var colorRange = d3.scale.category20();
var color = d3.scale.ordinal()
	.range(colorRange.range());


datasetTotal = '.$testString.'


change(datasetTotal);


function change(data) {

	/* ------- PIE SLICES -------*/
	var slice = svg.select(".slices").selectAll("path.slice")
        .data(pie(data), function(d){ return d.data.label });

    slice.enter()
        .insert("path")
        .style("fill", function(d) { return color(d.data.label); })
        .attr("class", "slice");

    slice
        .transition().duration(1000)
        .attrTween("d", function(d) {
            this._current = this._current || d;
            var interpolate = d3.interpolate(this._current, d);
            this._current = interpolate(0);
            return function(t) {
                return arc(interpolate(t));
            };
        })
    slice
        .on("mousemove", function(d){
            div.style("left", d3.event.pageX+10+"px");
            div.style("top", d3.event.pageY-25+"px");
            div.style("display", "inline-block");
            div.html((d.data.label)+"<br>"+(d.data.value));
        });
    slice
        .on("mouseout", function(d){
            div.style("display", "none");
        });

    slice.exit()
        .remove();

    var legend = svg.selectAll(\'.legend\')
        .data(color.domain())
        .enter()
        .append(\'g\')
        .attr(\'class\', \'legend\')
        .attr(\'transform\', function(d, i) {
            var height = legendRectSize + legendSpacing;
            var offset =  height * color.domain().length / 2;
            var horz = -3 * legendRectSize;
            var vert = i * height - offset;
            return \'translate(\' + horz + \',\' + vert + \')\';
        });

    legend.append(\'rect\')
        .attr(\'width\', legendRectSize)
        .attr(\'height\', legendRectSize)
        .style(\'fill\', color)
        .style(\'stroke\', color);

    legend.append(\'text\')
        .attr(\'x\', legendRectSize + legendSpacing)
        .attr(\'y\', legendRectSize - legendSpacing)
        .text(function(d) { return d; });


    /* ------- TEXT LABELS -------*/

    var text = svg.select(".labelName").selectAll("text")
        .data(pie(data), function(d){ return d.data.label });

    text.enter()
        .append("text")
        .attr("dy", ".35em")
        .style("fill", function(d) { return "red"; })
        .text(function(d) {
            return (d.data.label+": "+d.value);
        });

    function midAngle(d){
        return d.startAngle + (d.endAngle - d.startAngle)/2;
    }

    text
        .transition().duration(1000)
        .attrTween("transform", function(d) {
            this._current = this._current || d;
            var interpolate = d3.interpolate(this._current, d);
            this._current = interpolate(0);
            return function(t) {
                var d2 = interpolate(t);
                var pos = outerArc.centroid(d2);
                pos[0] = radius * (midAngle(d2) < Math.PI ? 1 : -1);
                return "translate("+ pos +")";
            };
        })
        .styleTween("text-anchor", function(d){
            this._current = this._current || d;
            var interpolate = d3.interpolate(this._current, d);
            this._current = interpolate(0);
            return function(t) {
                var d2 = interpolate(t);
                return midAngle(d2) < Math.PI ? "start":"end";
            };
        })
        .style("fill", function(d) {
            return (d.data.color);
        })
        .text(function(d) {
            return (d.data.label+": "+d.value);
        });


    text.exit()
        .remove();

    var polyline = svg.select(".lines").selectAll("polyline")
        .data(pie(data), function(d){ return d.data.label });

    polyline.enter()
        .append("polyline");

    polyline.transition().duration(1000)
        .attrTween("points", function(d){
            this._current = this._current || d;
            var interpolate = d3.interpolate(this._current, d);
            this._current = interpolate(0);
            return function(t) {
                var d2 = interpolate(t);
                var pos = outerArc.centroid(d2);
                pos[0] = radius * 0.95 * (midAngle(d2) < Math.PI ? 1 : -1);
                return [arc.centroid(d2), outerArc.centroid(d2), pos];
            };
        });

    polyline.exit()
        .remove();
};

svg.append("text")
        .attr("x", 0)
        .attr("y", 0-height/2+20)
        .attr("text-anchor", "middle")
        .style("font-size", "16px")
        .style("text-decoration", "underline")
        .text("'.$title.'");

</script>';


    return $html;
}

/*
 $html .= '<style type="text/css">
            .slice text {
            font-size: 16pt;
            font-family: Arial;
        }
        svg {

  margin: 0 auto; /* poor attempt at centering */

//height: auto !important; /* overrides inline */
  //width: auto !important; /* overrides inline */

  //display: block;
//}

