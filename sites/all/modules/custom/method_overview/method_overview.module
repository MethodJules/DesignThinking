<?php
/**
 * Created by PhpStorm.
 * User: jonaskortum
 * Date: 08.12.16
 * Time: 07:58
 */

function method_overview_menu()
{
    $items['methoden_uebersicht'] = array(
        'title' => 'Methodenübersicht',
        'page callback' => 'method_overview_show_methods',
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );

    $items['change_method_execution/%'] = array(
        'title' => 'Methodendurchführung ändern',
        'page arguments' => array('method_overview_change_method_form'),
        'access arguments' => array('access content'),
        'page callback' => 'drupal_get_form',
        'type' => MENU_CALLBACK,
    );

    return $items;
}

function method_overview_change_method_form($form, &$form_submit) {
    $method_id = arg(1);
    $current_method = get_current_method_for_method_overview($method_id);

    $methods = get_available_methods_for_change();

    $form["method"]["plugin_select1"] = array(
        "#type" => "select",
        "#title" => t("Bitte passende Methode aussuchen"),
        "#options" => $methods,
        "#default_value" => $current_method->name,
        "#description" => t("Wähle Methode."),
    );

    $form["phase"]["plugin_select2"] = array(
        "#type" => "select",
        "#title" => t("Bitte passende Phase aussuchen"),
        "#default_value" => $current_method->phase,
        "#options" => array(
            "konvergent" => t("konvergent"),
            "divergent" => t("divergent"),
        ),
        "#description" => t("Wähle Phase."),
    );

    $form["raum"]["plugin_select3"] = array(
        "#type" => "select",
        "#title" => t("Bitte passenden Raum aussuchen"),
        "#default_value" => $current_method->room,
        "#options" => array(
            "Problemraum" => t("Problemraum"),
            "Lösungsraum" => t("Lösungsraum"),
            "Implementierungsraum" => t("Implementierungsraum"),
        ),
        "#description" => t("Wähle Raum."),
    );

    $form['grund'] = array(
        '#title' => t('Grund der Methodenwahl'),
        '#resizable' => FALSE,
        "#default_value" => $current_method->reason,
        '#type' => 'textarea'
    );

    $form['ziel'] = array(
        '#title' => t('Ziel der Methode'),
        '#resizable' => FALSE,
        "#default_value" => $current_method->goal,
        '#type' => 'textarea'
    );

    $form['ausfuehrung'] = array(
        '#title' => t('Ausführung der Methode'),
        '#resizable' => FALSE,
        "#default_value" => $current_method->execution,
        '#type' => 'textarea'
    );

    $form['rating'] = array(
        '#type' => 'fivestar',
        '#stars' => 5,
        '#default_value' => $current_method->rating,
        '#title' => t('Bewertung der Methode.'),
    );

    $form['bewertung'] = array(
        '#title' => t('Bewertung der Ergebnisse'),
        '#resizable' => FALSE,
        "#default_value" => $current_method->evaluation,
        '#type' => 'textarea'
    );

    $types = array("Problemraum" => "Problemraum", "Lösungsraum" => "Lösungsraum", "Implementierungsraum" => "Implementierungsraum");


    $form["raum2"]["plugin_select_raum_end"] = array(
        "#type" => "select",
        "#title" => t("Raum am Ende des Treffens (In welchem Raum befindet ihr euch nach der Methodendurchführung?)"),
        "#options" => $types,
        '#default_value' => $current_method->raum_end,
    );

    $types2 = array("konvergent" => "konvergent", "divergent" => "divergent");


    $form["phase3"]["plugin_select_phase_end"] = array(
        "#type" => "select",
        "#title" => t("Phase am Ende des Treffens (In welcher Phase befindet ihr euch nach der Methodendurchführung?)"),
        "#options" => $types2,
        '#default_value' => $current_method->phase_end,
    );

    $test = method_overview_get_all_images($current_method->method_execution_id);

    $form['file'] = array(
        '#type' => 'file',
        '#name' => 'files[]',
        '#title' => t('Upload some photos'),
        '#attributes' => array('multiple' => 'multiple'),
    );


    $form['form_item'] = array(
        '#type' => 'markup',
        '#title' => t('My Form Item'),
        '#prefix' => $test,
    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Speichern',
        '#submit' => array('update_method_execution_from_method_overview')
    );

    $form['delete'] = array(
        '#type' => 'submit',
        '#value' => 'Löschen',
        '#submit' => array('delete_method_execution_in_method_overview')
    );

    $form['back'] = array(
        '#type' => 'submit',
        '#value' => 'Zurück zur Methodenübersicht',
        '#submit' => array('method_overview_back_to_method_overview')
    );



    return $form;
}

function get_current_method_for_method_overview($id) {
    $method = "";
    $sql = "SELECT * FROM {method_execution} WHERE method_execution_id = $id";

    $result = db_query($sql);
    foreach($result as $r) {
        $method = $r;
    }
    return $method;
}

function method_overview_show_methods() {
    global $base_url;
    $counter = 1;
    $methods = get_relevant_methods_for_overview();

    $tempString = method_overview_d3_gantt(get_relevant_methods_for_overview(), 40);

    $tempString .= "<table><th>Nr.</th><th>Datum</th><th>Methodenname</th><th> Bewertung</th><th> Bewertung</th><th> Aktionen</th></th>";


    foreach ($methods as $r) {

        $image = "";
        if($r->rating == 20) {
            $image = "one.png";
        } else if($r->rating == 40) {
            $image = "two.png";
        } else if($r->rating == 60) {
            $image = "three.png";
        } else if($r->rating == 80) {
            $image = "four.png";
        } else if($r->rating == 100) {
            $image = "five.png";
        }

        $deadline2 = "";
        $date = new DateTime($r->creation_date);
        $deadline2 .= $date->format('d.m.Y');

        $bewertung = $r->evaluation;

        if(!strcmp($bewertung, "")) {
            $bewertung = "Keine Bewertung als Freitext vorhanden";
        }

        $method_id = $r->method_execution_id;
        $protocol_id = $r->protocol_id;
        $tempString = $tempString . "<tr><td>".$counter.".</td><td>".$deadline2."</td><td>
        <a href='methodenanzeige/$method_id/zqjvEz44Qx'>$r->name</a></td>
        <td><img src=".$image." height=\"100\" width=\"100\"></td>
            <td>$bewertung</td>
            <td><ul><li><a href='".$base_url."/protokoll_methode_aendern/".$method_id."/zqjvEz44Qx' >bearbeiten</a></li><li><a href='".$base_url."/protokollanzeige/".$protocol_id."' >Link zum Protokoll</a></li></ul></td></tr></tr>";
        $counter = $counter + 1;

    }

    $tempString .= "</table>";

    return $tempString;
}

function method_overview_get_all_images($id) {
    global $base_url;
    $sql = "SELECT * FROM {method_execution_data} WHERE method_execution_id = ".$id;

    $result = db_query($sql);

    $temp = "";

    foreach($result as $r) {
        $allowed =  array('gif','png' ,'jpg');
        $filename = $r->path;
        $basename = preg_replace('/^.+[\\\\\\/]/', '', $filename);
        $ext = pathinfo($filename, PATHINFO_EXTENSION);
        if(in_array($ext,$allowed) ) {
            $path = "/$base_url/sites/default/files/".$r->path;

            $temp .= "<img style=\"max-width:540px;\" src='".$path."'alt=Selfhtml><br><b>$basename</b><a href='/$base_url/delete_file/$id/$basename/zqjvEz44Qx'\">&nbsp;&nbsp;Löschen</a><br><br>";
        } else {
            $temp .= '<a href="/'.$base_url.'/sites/default/files/'.$r->path.'" target="_blank">'.$basename.'</a><a href="/delete_file/'.$id.'/'.$basename.'/zqjvEz44Qx">&nbsp;&nbsp;Löschen</a><br><br>';
        }
    }

    return $temp;
}

function get_relevant_methods_for_overview() {
    $participants = get_participants_for_methods();
    $sql = "SELECT * FROM {method_execution} WHERE uid in (" . $participants . ") ORDER BY creation_date";
    $result = db_query($sql);

    return $result;
}

function get_available_methods_for_change() {
    $methods = array();
    $sql = "SELECT title, nid FROM {node} WHERE type = 'methode' ORDER BY title";
    $result = db_query($sql);
    foreach ($result as $r) {
        $methods[$r->title] = $r->title;
    }
    return $methods;
}

function get_participants_for_methods() {
    $users = array();
    global $user;
    $user_id = $user->uid;

    $sql = "SELECT ur.rid, r.name, ur.uid FROM {role} AS r INNER JOIN {users_roles} AS ur ON r.rid = ur.rid WHERE ur.rid = (SELECT usro.rid FROM {users_roles} as usro WHERE usro.uid = $user_id)";

    $proresult = db_query($sql);

    foreach($proresult as $pro) {
        array_push($users, $pro->uid);
    }

    $list = implode(',', $users);

    return $list;
}

function delete_method_execution_in_method_overview() {
    $method_id = arg(1);
    $sql = "DELETE FROM {method_execution} WHERE method_execution_id = $method_id";
    $result = db_query($sql);
    $sql2 = "DELETE FROM {method_execution_data} WHERE method_execution_id = $method_id";
    db_query($sql2);
    drupal_set_message("Objekt wurde gelöscht");
    drupal_goto('/method_overview');

}

function method_overview_back_to_method_overview() {
    drupal_goto('/methoden_uebersicht');
}

function update_method_execution_from_method_overview($form, &$form_state) {
    $method_id = arg(1);
    $rating = $form_state['values']['rating'];
    $method = $form_state['values']['plugin_select1'];
    $phase = $form_state['values']['plugin_select2'];
    $raum = $form_state['values']['plugin_select3'];
    $ziel = $form_state['values']['ziel'];
    $ausfuehrung = $form_state['values']['ausfuehrung'];
    $fazit = $form_state['values']['bewertung'];
    $grund =  $form_state['values']['grund'];
    $raum2 = $form_state['values']['plugin_select_raum_end'];
    $phase2 = $form_state['values']['plugin_select_phase_end'];


    $sql = "UPDATE {method_execution} SET name = '$method', evaluation = '$fazit', room = '$raum', phase = '$phase', goal = '$ziel', execution = '$ausfuehrung', rating = '$rating', raum_end = '$raum2', phase_end ='$phase2', reason = '$grund' WHERE method_execution_id = '$method_id'";
    $result = db_query($sql);

    $num_files = count($_FILES['files']['name']);
    $main_path = "";

    for ($i = 0; $i < $num_files; $i++) {
        $file = file_save_upload($i, array(
            'file_validate_is_audio' => array(),
            'file_validate_extensions' => array('png pdf jpg jpeg mp3 mp4'),
            'file_validate_size' => array(50 * 1024 * 1024),
        ));
        if ($file) {
            $file->status = FILE_STATUS_PERMANENT;
            //$mydir = 'public://methods/';
            //file_prepare_directory($mydir, FILE_CREATE_DIRECTORY);
            if ($file = file_move($file, 'public://methods')) {
                $file->status = FILE_STATUS_PERMANENT;
                $form_state['values']['file'][$i] = $file;
                $path = substr($file->uri, 9);
                $sql = "INSERT INTO {method_execution_data} (method_execution_id, path) VALUES($method_id, '$path')";
                db_query($sql);
            }
        }
    }

    drupal_set_message("Dokumentation zur Methode wurde geändert");
    drupal_goto('/methoden_uebersicht');
}

function method_overview_d3_gantt($result, $y_wert)
{

    $link_reference_1 = -1;
    $link_reference_2 = 0;
    $check = true;

    $y_abstand = $y_wert;

    $test = array();
    $validation = array();
    $protocols = $result;
    foreach ($protocols as $protocol) {
        $validation["name"] = $protocol->raum_end . " " . $protocol->phase_end;

        if(!strcmp($protocol->room, "Vorbereitung") || !strcmp($protocol->room, "Projektmanagement")) {
            $validation["valid"] = 0;
        } else {
            $validation["valid"] = 1;
        }
        array_push($test, $validation);
    }
    $stuff = array();
    $stuff['nodes'] = array();
    $stuff['links'] = array();

    $counter = 0;
    $referenz_array = array();
    $y = 240;
    $x = 25;


    for ($i = 0; $i < sizeof($test); $i++) {

        $name = $test[$i]["name"];

        if($test[$i]["valid"]) {
            switch ($name) {
                case 'Problemraum divergent':
                    if ($counter == 0) {
                        array_push($stuff['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "green"));
                        array_push($referenz_array, "1");
                        $counter++;
                    } else {
                        if($referenz_array[$counter-1] <= 1) {
                            $x = $x+40;
                            if($x > 185) {
                                $x = 25;
                                $y = $y+$y_abstand;
                            }
                            array_push($stuff['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "green"));
                            array_push($referenz_array, "1");
                            $counter++;
                        } else {
                            $y = $y+$y_abstand;
                            $x = 25;
                            array_push($stuff['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "green"));
                            array_push($referenz_array, "1");
                            $counter++;
                        }
                    }
                    break;

                case 'Problemraum konvergent':
                    if ($counter == 0) {
                        $x = 245;
                        $y = 240;
                        array_push($stuff['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "red"));
                        array_push($referenz_array, "2");
                        $counter++;
                    } else {
                        if($referenz_array[$counter-1] <2) {
                            $x = 245;
                            array_push($stuff['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "red"));
                            array_push($referenz_array, "2");
                            $counter++;
                        } else if ($referenz_array[$counter-1] == 2) {
                            $x = $x+40;
                            if($x > 405) {
                                $x = 245;
                                $y = $y+$y_abstand;
                            }
                            array_push($stuff['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "red"));
                            array_push($referenz_array, "2");
                            $counter++;
                        } else if ($referenz_array[$counter-1] >2) {
                            $x = 245;
                            $y = $y+$y_abstand;
                            array_push($stuff['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "red"));
                            array_push($referenz_array, "2");
                            $counter++;
                        }
                    }
                    break;

                case 'Lösungsraum divergent':
                    if ($counter == 0) {
                        $x = 461;
                        $y = 240;
                        array_push($stuff['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "blue"));
                        array_push($referenz_array, "3");
                        $counter++;
                    } else {
                        if($referenz_array[$counter-1] < 3) {
                            $x = 461;
                            array_push($stuff['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "blue"));
                            array_push($referenz_array, "3");
                            $counter++;
                        } else if ($referenz_array[$counter-1] == 3) {
                            $x = $x+40;
                            if($x > 622) {
                                $x = 461;
                                $y = $y+$y_abstand;
                            }
                            array_push($stuff['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "blue"));
                            array_push($referenz_array, "3");
                            $counter++;
                        } else if ($referenz_array[$counter-1] >3) {
                            $x = 461;
                            $y = $y+$y_abstand;
                            array_push($stuff['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "blue"));
                            array_push($referenz_array, "3");
                            $counter++;
                        }
                    }
                    break;

                case "Lösungsraum konvergent":
                    if ($counter == 0) {
                        $x = 677;
                        $y = 240;
                        array_push($stuff['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "yellow"));
                        array_push($referenz_array, "4");
                        $counter++;
                    } else {
                        if($referenz_array[$counter-1] < 4) {
                            $x = 677;
                            array_push($stuff['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "yellow"));
                            array_push($referenz_array, "4");
                            $counter++;
                        } else if ($referenz_array[$counter-1] == 4) {
                            $x = $x+40;
                            if($x > 854) {
                                $x = 677;
                                $y = $y+$y_abstand;
                            }
                            array_push($stuff['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "yellow"));
                            array_push($referenz_array, "4");
                            $counter++;
                        } else if ($referenz_array[$counter-1] >4) {
                            $x = 677;
                            $y = $y+$y_abstand;
                            array_push($stuff['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "yellow"));
                            array_push($referenz_array, "4");
                            $counter++;
                        }
                    }
                    break;

                case "Implementierungsraum divergent":
                    if ($counter == 0) {
                        $x = 891;
                        $y = 240;
                        array_push($stuff['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "black"));
                        array_push($referenz_array, "5");
                        $counter++;
                    } else {
                        if($referenz_array[$counter-1] < 5) {
                            $x = 891;
                            array_push($stuff['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "black"));
                            array_push($referenz_array, "5");
                            $counter++;
                        } else if ($referenz_array[$counter-1] == 5) {
                            $x = $x+40;
                            if($x > 1051) {
                                $x = 891;
                                $y = $y+$y_abstand;
                            }
                            array_push($stuff['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "black"));
                            array_push($referenz_array, "5");
                            $counter++;
                        } else if ($referenz_array[$counter-1] >5) {
                            $x = 891;
                            $y = $y+$y_abstand;
                            array_push($stuff['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "black"));
                            array_push($referenz_array, "5");
                            $counter++;
                        }
                    }
                    break;

                case "Implementierungsraum konvergent":
                    if ($counter == 0) {
                        $x = 1111;
                        $y = 240;
                        array_push($stuff['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "brown"));
                        array_push($referenz_array, "6");
                        $counter++;

                    } else {
                        if($referenz_array[$counter-1] < 6) {
                            $x = 1111;
                            array_push($stuff['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "brown"));
                            array_push($referenz_array, "6");
                            $counter++;
                        } else if ($referenz_array[$counter-1] == 6) {
                            $x = $x+40;
                            if($x > 1271) {
                                $x = 1111;
                                $y = $y+$y_abstand;
                            }
                            array_push($stuff['nodes'], array('x' => $x, 'y' => $y, 'fixed' => true, 'color' => "brown"));
                            array_push($referenz_array, "6");
                            $counter++;
                        }
                    }
                    break;
            }



        } else {
            $check = false;

        }

        if($i>0) {

            if($check) {
                $link_reference_1++;
                $link_reference_2++;

                array_push($stuff['links'], array('source' => $link_reference_1, 'target' => $link_reference_2));
            } else {
                if($link_reference_1 >=0) {
                    array_push($stuff['links'], array('source' => $link_reference_1, 'target' => $link_reference_2));
                    $check = true;
                }
                $check = true;

            }
        }
    }

    $chart = array(
        'id' => 'visualization',
        'type' => 'gantt',
        'data' => ($stuff),
    );

    $d3_chart = d3_draw($chart);

    return $d3_chart;
}